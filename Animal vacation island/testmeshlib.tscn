[gd_scene load_steps=4 format=2]

[sub_resource type="Shader" id=24]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

const highp float PI = 3.14159265359;
uniform float radius = 80.0;
uniform vec3 origin = vec3(0, -80, 0);

uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	vec3 world_vertex = (WORLD_MATRIX*vec4(VERTEX, 1.0)).xyz;
    float angle = (world_vertex.z - origin.z)/radius;
    angle = clamp(angle, -PI*0.5, PI*0.5);
    
    float excess = (world_vertex.z - origin.z) - angle*radius;
    vec3 radial = vec3(0, cos(angle), sin(angle));
    world_vertex.zy = origin.zy + radial.zy*(world_vertex.y - origin.y);
    world_vertex.y -= abs(excess);
	VERTEX = (inverse(WORLD_MATRIX)*vec4(world_vertex, 1.0)).xyz;
    mat3 angle_matrix = mat3(
        vec3(1, 0, 0),
        radial,
        vec3(0, -radial.z, radial.y)
    );
    NORMAL = angle_matrix*NORMAL;
    TANGENT = angle_matrix*TANGENT;
    BINORMAL = angle_matrix*BINORMAL;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}"

[sub_resource type="ShaderMaterial" id=25]
shader = SubResource( 24 )
shader_param/radius = 80.0
shader_param/origin = Vector3( 0, -80, 0 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 100, 100, 0 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="PlaneMesh" id=26]

[node name="Spatial" type="Spatial"]

[node name="tree" type="MeshInstance" parent="." groups=[
"globe_shader",
]]
material_override = SubResource( 25 )
mesh = SubResource( 26 )
material/0 = null
